{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,WAGA,IAAMC,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,YAAaJ,SAASC,cAAc,wBACpCI,OAAQL,SAASC,cAAc,0BAMjCH,EAAKC,OAAOO,iBAAiB,UAE7B,SAA6BC,G,kBAmB7B,IAAuBC,EAAUC,GAAVD,EAXLE,EAWeD,EAXZE,EAYZ,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEL,WAAUC,UAEpBK,EAAO,CAAEN,WAAUC,S,GAEpBA,E,KAnBAS,MAAK,SAAAC,GAAWA,EAARX,S,IAAUY,EAAUD,EAAVC,WACjBC,EAAAzB,GAAS0B,OAAOC,QAAQ,uBAAiCC,OAARd,EAAE,QAAiBc,OAAXJ,EAAW,M,IAErEK,OAAM,SAAAN,GAAWA,EAARX,S,IAAUY,EAAUD,EAAVC,WAClBC,EAAAzB,GAAS0B,OAAOI,QAAQ,sBAA8BF,OAARd,EAAE,QAAiBc,OAAXJ,EAAW,M,IAErET,GAAcgB,C,EAdhBpB,EAAEqB,iBAMF,IAJA,IAAMD,EAAYE,OAAO/B,EAAKI,WAAW4B,OACrCnB,EAAakB,OAAO/B,EAAKK,UAAU2B,OACjCC,EAASF,OAAO/B,EAAKM,YAAY0B,OAE9BE,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAACC,EAAAD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  formEl: document.querySelector('.form'),\n  inputDelay: document.querySelector('input[name=\"delay\"]'),\n  inputStep: document.querySelector('input[name=\"step\"]'),\n  inputAmount: document.querySelector('input[name=\"amount\"]'),\n  button: document.querySelector('button[type=\"submit\"]'),\n};\n// refs.formEl.addEventListener('input', e => {\n//   console.log(e);\n// });\n\nrefs.formEl.addEventListener('submit', submitCreatePromise);\n\nfunction submitCreatePromise(e) {\n  e.preventDefault();\n\n  const delayStep = Number(refs.inputDelay.value);\n  let delayFirst = Number(refs.inputStep.value);\n  const amount = Number(refs.inputAmount.value);\n\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delayFirst)\n      .then(({ position, delayFirst }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${i} in ${delayFirst}ms`);\n      })\n      .catch(({ position, delayFirst }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${i} in ${delayFirst}ms`);\n      });\n    delayFirst += delayStep;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","formEl","document","querySelector","inputDelay","inputStep","inputAmount","button","addEventListener","e","position","delay","i","delayFirst1","Promise","resolve","reject","setTimeout","Math","random","then","param","delayFirst","$parcel$interopDefault","Notify","success","concat","catch","failure","delayStep","preventDefault","Number","value","amount","i1","_loop"],"version":3,"file":"03-promises.10e54e9f.js.map"}